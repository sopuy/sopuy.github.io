{"pages":[{"title":"  Seach Home\r\n | sopuy's blog","text":"\n\n\n\n\n\n  Seach Home\r\n | sopuy's blog\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsopuy's blog \n\n\n\n\n\nToggle navigation\n\n\n\n\nsopuy's blog\n\n\n\n\n\nNotes\n\n\nPython\n\n\nAbout\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n    Search Results\r\n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSocial\n\n \n\r\n    github\r\n  \n\n\n\nLinks\n\n \n\r\n    柒's Blog\r\n  \n \n\r\n    胡博靖\r\n  \n \n\r\n    WuChong\r\n  \n\n\n\nBrowse content by\n\n Categories\n Dates\n Tags\n\n\n\nCopyright notice\n© Copyright 2017-2018 sopuy.\n\n\n声明\n本博客所有文章除特别声明外，均采用  CC BY-NC-SA 3.0 许可协议。转载请注明出处！\n\n\n\n\n\n Back to top\n\n\r\n          Site generated by  Pelican.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n    $(document).ready(function() {\r\n      $('#tipue_search_input').tipuesearch({\r\n          'mode' : 'json',\r\n          'show': 10,\r\n          'newWindow': false,\r\n          'contentLocation': 'http://127.0.0.1:8000/tipuesearch_content.json'\r\n      });\r\n    });\r\n  \n\n","tags":"","url":"http://127.0.0.1:8000/search.html"},{"title":"About","text":"如果觉得本站文章对您有用，不妨打赏一下： 做自己喜欢的事 联系方式: Email","tags":"about","url":"http://127.0.0.1:8000/pages/about.html"},{"title":"pelican部署","text":"Pelican是一套开源的使用Python编写的博客静态生成, 可以添加文章和和创建页面, 可以使用MarkDown reStructuredText 和 AsiiDoc 的格式来抒写, 同时使用 Disqus评论系统, 支持 RSS和Atom输出, 插件, 主题, 代码高亮等功能, 采用Jajin2模板引擎, 可以很容易的更改模板。 virtualenv可以搭建虚拟且独立的python环境，帮助你在一台机子上管理多个版本的python库。 Pelican Docs 标题配置： Status: draft/published/hidden #是否发布 Summary: #文章列表只显示此信息 安装virtualenv pip install virtualenv 创建一个env环境 打开命令行窗口 d: cd sopuy\\github virtualenv pelican markdown pelican\\scripts\\activate pip install pelican 创建blog mkdir blog cd blog pelican-quickstart 在回答一系列问题过后你的博客就建成的, 主要生成下列文件: . |-- content # 所有文章放于此目录 |-- develop_server.sh # 用于开启测试服务器 |-- output # 静态生成文件 |-- pelicanconf.py # 配置文件 |-- publishconf.py # 配置文件 写文章 在 content 目录新建一个 test.md文件, 填入一下内容: Title: 文章标题 Date: 2013-04-18 Category: 文章类别 Tag: 标签1, 标签2 这里是内容 生成html 使用命令： pelican content 开启本地测试服务器 cd ~/projects/yoursite/output python -m pelican.server 本地测试web服务器 pelican主题 安装主题： pelican-themes --list pelican-themes -v -l #查看已安装主题 pelican-themes --install ./pelican-themes/pelican-bootstrap3 --verbose #安装新主题 pelican-themes --remove pelican-bootstrap3 #删除主题 使用绝对路径: THEME = \"./pelican-themes/pelican-bootstrap3\" 可用主题： pelican-bootstrap3 elegant Plumage","tags":"Python","url":"http://127.0.0.1:8000/posts/2018/pelican-basic.html"},{"title":"Django 环境部署(windows)","text":"Django 环境部署 安装前准备（windows 10环境）： 1. 安装python 2. 安装virtualenv pip install virtualenv 3. 创建虚拟目录 d : cd project virtualenv django_env 新建项目： django - admin . py startproject project - name 新建 app ： python manage . py startapp app - name 或 django - admin . py startapp app - name 同步数据库： python manage . py migrate 使用开发服务器： python manage . py runserver 0 : 8000 清空数据库： python manage . py flush 创建超管： python manage . py createsuperuser 导出导入数据： python manage . py dumpdata appname > appname . jso或python manage . py loaddata appname . json django命令行 ： python manage . py shell 数据库命令行： python manage . py dbshellenv cd django_env scripts \\ active # 激活虚拟环境 安装django 安装django pip install django 或者安装指定版本 pip install django==1.11 创建项目：在目录'(django_env) D:\\project\\django\\django_env'下，执行 django-admin startproject website 创建应用：在目录'(django_env) D:\\project\\django\\django_env\\website'下，执行 mange.py startapp tech 常用命令： 查看 django安装路径 ： python - c 'import django;print(django.__path__)' 查看 django版本 ： python - c 'import django;print(django.get_version())' 创建初始静态文件： python manage . py collectstatic 更多： python manage . py 配置数据库mysql 下载mysql 解压下载的mysql压缩包并配置 my.ini [mysqld] basedir = D:\\project\\mysql-5.7.17-winx64 datadir = D:\\project\\mysql-5.7.17-winx64\\data port = 3306 sql_mode = NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES default-storage-engine = INNODB [mysql] default-character-set = utf8 以管理员身份运行‘命令提示符CMD'，将目录切换到你解压文件的bin目录，使用命令 mysqld install 安装mysql 启动mysql服务 net start mysql 创建数据库： create database website default charset utf8; 常用语句 use mysql; insert into mysql.user(Host,User,Password) values ('localhost','sopuy',password('111111')); create database website default charset utf8; grant all privileges on website.* to sopuy@localhost; grant all privileges on website.* to sopuy@'1.2.3.%' identified by 'sopuy'; update mysql.user set password=password('111111') where User=\"sopuy\"; flush privileges; select user , host from user; 配置django 安装python-mysql连接库： pip install pymysql 修改django配置文件 D:\\project\\django\\django_env\\website\\website\\settings.py DATABASES = { 'default': { #'ENGINE': 'django.db.backends.sqlite3', #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), 'ENGINE': 'django.db.backends.mysql', 'NAME': 'website', 'USER':'root', 'PASSWORD': '', 'HOST':'', 'PORT':'', } } 修改 `D:\\project\\django\\django_env\\website\\website\\__init__.py import pymysql pymysql . install_as_MySQLdb () 同步数据库： python manage.py migrate 创建超管： python manage.py createsuperuser 运行开发服务器： python manage.py runserver 0:8000 或者 python manage.py runserver 0.0.0.0:8000 访问开发服务器 其他 去除密码复杂性校验 修改配置文件 D:\\project\\django\\django_env\\Lib\\site-packages\\django\\contrib\\auth\\password_validation.py 通过Nginx部署django(Nginx+uwsgi+django)","tags":"Python","url":"http://127.0.0.1:8000/posts/2017/django-huan-jing-bu-shu-windows.html"},{"title":"python-pyenv","text":"pyenv&virtualenv pyenv 是轻量的Python版本管理器，帮助你在一台机子上建立多个版本的python环境。 virtualenv可以搭建虚拟且独立的python环境，帮助你在一台机子上管理多个版本的python库。 pyenv安装及使用 2016/06/08 11:04 - pyenv安装 首先打开 github pyenv ， 选择一个最新版本，下载原始文件,然后解压到指定目录并添加环境变量。 或者 git clone git://github.com/yyuu/pyenv.git /home/sopuy/.pyenv 。 echo 'export PYENV_ROOT=\"/home/sopuy/.pyenv\"' >> ~/.bashrc echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' >> ~/.bashrc echo 'eval \"$(pyenv init -)\"' >> ~/.bashrc exec $SHELL -l pyenv使用 2016/06/08 10:53 pyenv常用命令： pyenv install -l #列举所有的可用的python版本 pyenv versions #查看所有版本，*为当前 pyenv version #当前版本 pyenv install #安装一个Python版本到$PYENV_ROOT/versions pyenv install -v 2.7.10 pyenv uninstall #卸载 pyenv rehash #为所有已安装的可执行文件创建shims，增删版本和执行Pip之后都需要执行 pyenv global #设置全局的Python版本， pyenv local 转换版本的时候别忘了pyenv rehash virtualenv 2017/04/20 10:21 - 安装 pip install virtualenv 创建一个env环境 virtualenv env 激活环境 在windows中虚拟环境的启动使用命令： your_env_dir\\Scripts\\activate 取消环境 离开虚拟环境，使用命令 deactivate","tags":"Python","url":"http://127.0.0.1:8000/posts/2017/python-pyenvvirtualenv.html"},{"title":"python模块学习方法及相关概念","text":"python模块学习方法及相关概念 dir()/help()函数 想要快速的学会一个Python的模块和方法，两个函数必须要知道，那就是dir()和help():： dir():能够快速的以集合的型式列出该模块下的所有内容（类、常量、方法）; help():能够列出模块、关键字、类、方法的内容、描述、语法、使用方法; 还有更多帮助： - 声明编码方式 #coding=utf-8 - 查看帮助 help(\"import\") - 查看模块的使用 help(\"os.path\") - 查看list如何使用 help(\"list\") - 查看字符串中find方法使用 help(\"str.find\") - 查看内置函数如何使用 help(\"open\") - 列出所有已经安装的模块 help('modules') - 查看所有Python的关键字 help(\"keywords\") - 查看内置函数列表 dir(__builtins__) 函数、类、模块、包、和库 简单讲，Package是由很多module组成，来实现某种功能，modules由函数和类组成。库是抽象概念，也可以是各种模块组成。 函数 理解为数学上的函数就可以了，实现某一功能的代码段。 - 调用：当函数定义好之后，可以直接调用。 比如：def summ(add1,add2)，那么可以直接调用，即：summ(1,2) 类 类包含数据说明和一组操作数据或传递消息的函数，类的实例称为对象。 - 调用：类定义好之后，不能像函数一样直接调用，而需要间接调用。 比如：class people，那么调用时，a=people(对象)，之后，a.age()等等 模块 一个完整的Python文件。在物理上的组织方式上为文件（比如math.py）；在逻辑的组织方式上，这个文件为模块（比如math）。 - 调用：将多个类放在同一个py下，比如放在model.py中，则import model即可调用 包 包是一个有层次的文件目录结构，它定义了由n个模块或n个子包组成的python应用程序执行环境。 通俗一点：包是一个包含 __init__.py 文件的目录，该目录下一定得有这个 __init__.py 文件和其它模块或子包。 - 调用： 创建文件夹，并在文件夹中创建 __init__.py 文件，调用时直接 import '文件夹名' 即可 库 库的概念是具有相关功能模块的集合。这也是Python的一大特色之一，即具有强大的标准库、第三方库以及自定义模块。库是一个抽象概念，在python中是包和模块的形式。 以上全都是对象。。&#94;_&#94;","tags":"Python","url":"http://127.0.0.1:8000/posts/2017/pythonmo-kuai-xue-xi-fang-fa-ji-xiang-guan-gai-nian.html"},{"title":"git基本使用 [置顶]","text":"git基本使用 git下载 搭建git服务器 git基本概念 基本概念：git有工作区与暂存区的概念，工作区及创建git仓库的系统目录(就是你在电脑里能看到的目录)工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。 Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。 我们把文件往Git版本库里添加的时候，是分两步执行的： 第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区； 第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。 因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。 每次准备提交前，先用git status 看下，是不是都已暂存起来了，然后再运行提交命令git commit 另外，git commit 加上-a 选项，Git就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过git add 步骤。 git样例 首先，选择一个合适的地方，创建一个空目录 mkdir learngit 通过git init命令把这个目录变成Git可以管理的仓库： cd learngit git init 添加(修改)文件(可连续多次修改，一次提交) git add readme.txt git add . 添加当前目录所有文件,--force强制添加 提交修改 git commit -m \"add readme\" ； git commit -a 直接提交 查看日志 git reflog 或者 git log 查看文件状态 git status 可查看是否提交到了工作区 版本回退reset、撤销修改checkout git reset hard readme.txt 撤销修改暂存区 git reset --hard commit_id 可回退到指定版本，commit_id通过 git reflog 获取 git reset --hard HEAD&#94; 回退到上一版本 首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD&#94;，上上一个版本就是HEAD&#94;&#94;，当然往上100个版本写100个&#94;比较容易数不过来，所以写成HEAD~100。 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。 git checkout -- readme.txt 把readme.txt文件在工作区的修改全部撤销 8. 删除文件(重命名) git rm readme.txt 删除工作区和暂存区 git rm --cached readme.txt 删除暂存区，不删工作区 git mv readme.txt readme.md 移动或重命名 9. 分支管理 git checkout -b dev git checkout命令加上-b参数表示创建并切换，相当于以下两条命令： git branch dev --创建分支 git branch -d dev --删除分支 git checkout dev --切换分支 git merge dev --git merge命令用于合并指定分支到当前分支 git分支 首先，我们创建dev分支，然后切换到dev分支： git checkout -b dev git checkout命令加上-b参数表示创建并切换，相当于以下两条命令： git merge dev --git merge命令用于合并指定分支到当前分支 git branch dev --创建分支 git branch -d dev --删除分支 git checkout dev --切换分支 git log dev &#94;master --查看 dev 有，而 master 中没有的 因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在master分支上工作效果是一样的，但过程更安全。 git stash --Git还提供了一个stash功能，可以把当前工作现场\"储藏\"起来，等以后恢复现场后继续工作。 git stash list --查看stash列表 Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法： 一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；另一种方式是用git stash pop，恢复的同时把stash内容也删了： git关联github 创建ssh key，以便关联远程仓库 ssh-keygen -t rsa -C \"youremail@example.com\" 关联一个远程库，使用命令: git remote add origin git@server-name:path/repo-name.git ； 关联后，使用命令 git push -u origin master 第一次推送master分支的所有内容； 此后，每次本地提交后，只要有必要，就可以使用命令: git push origin branch-name git push origin master 推送最新修改。 git remote 或者 git remote -v 查看远程仓库 git clone git clone git@github.com:michaelliao/gitskills.git - 实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。 - 使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。 标签管理 在Git中打标签非常简单，首先，切换到需要打标签的分支上，然后，敲命令 git tag <name> 就可以打一个新标签,默认标签是打在最新提交的commit上的。 可以用 git show <tagname> 查看标签信息。 命令 git tag <name> 用于新建一个标签，默认为HEAD，最新提交的commit上； git tag v0.9 \"commit id\" 也可以指定一个commit id； git tag -a <tagname> -m \"blablabla...\" 可以指定标签信息； git tag -s <tagname> -m \"blablabla...\" 可以用PGP签名标签； 命令 git tag 可以查看所有标签。 命令 git push origin <tagname> 可以推送一个本地标签； 命令 git push origin --tags 可以推送全部未推送过的本地标签； 命令 git tag -d <tagname> 可以删除一个本地标签； 命令 git push origin :refs/tags/<tagname> 可以删除一个远程标签。 .gitignore的文件忽略设置 【例子】 忽略 .o和 .a文件 *.[oa] 忽略 .b和 .B文件，my.b除外 *.[bB] !my.b 忽略dbg文件和dbg目录 dbg 只忽略dbg目录，不忽略dbg文件 dbg/ 只忽略dbg文件，不忽略dbg目录 dbg !dbg/ 只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内 /dbg git常用命令 设置标识 git config --global user.name \"Your Name\" git config --global user.email \"email@example.com\" git init --创建管理仓库，目录初始化 git add --创建跟踪文件/暂存文件 git status --检查当前文件状态 git commit --提交修改 git commit -a --不暂存，直接提交 git diff --比对文件 git reset --恢复 git rm --删除工作区和暂存区 git rm --cached --删除暂存区，不删工作区 git mv --移动或重命名 git log --查看日志 git log --pretty=oneline --简洁日志 用命令git add告诉Git，把文件添加到仓库： git add readme.txt 用命令git commit告诉Git，把文件提交到仓库 ： git commit -m \"wrote a readme file\" git status git diff git log 如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数： git log --pretty=oneline Git提供了一个命令git reflog用来记录你的每一次命令 从工作区和暂存区删除 git rm 从暂存区删除 git rm --cached git checkout -- file可以丢弃工作区的修改： $ git checkout -- readme.txt 列出master目录结构 git ls-tree master git教程 git服务器搭建 安装git yum install git 创建用户 useradd sopuy 在目录 /home/sopuy/ 下执行 git init --bare web.git ，会生成一个 web.git 的目录 更改目录权限 chown -R sopuy:sopuy web.git 禁用用户 sopuy shell登录，修改 /etc/passwd ,修改为 sopuy:x:501:501::/home/sopuy:/bin/git-shell 克隆远程仓库 git clone git@server-ip:/home/sopuy/web.git 管理公钥：把每个人的公钥放到 /home/sopuy/.ssh/authorized_keys 管理公钥可以使用 Gitosis 管理权限可以使用 gitolite","tags":"Notes","url":"http://127.0.0.1:8000/posts/2017/gitji-ben-shi-yong-zhi-ding.html"},{"title":"markdown常用语法","text":"markdown常用语法 [TOC] 1. 标题 2. 强调 3. 换行 4. 列表 5. 引用 6. 链接与图片 7. 代码块 8. 水平线 9. 待办事项 标题 以符号 # 标记，一个代表一级标题，共有六级标题 # 这是 H1 ## 这是 H2 ###### 这是 H6 强调 斜体：文字两端使用1对 * 或 - 标记起来 粗体：文字两端使用2对 * 或 - 标记起来 删除线：使用2对 ~ 包裹起来的行，标记为删除线 我是斜体 我是粗体 ~~ 我是删除线 ~~ 换行 在行尾添加两个空格加回车表示换行 列表 以符号 - 、 + 或 * 标记为无序列表，有序列表则直接在文字前加 1. 2. 3. 即可 list1 list2 list3 list4 list5 引用 只需要在文本前加入 > 这种尖括号（大于号）即可，区块引用可以嵌套 我是引用 我是引用的引用 链接与图片 链接以符号 []() 标识，图片与链接的语法很像，区别为在最前面添加了一个 ! 链接: 百度 图片: 代码块 只需要有3对```(数字1左边的按键)把代码块包裹起来就可以了 我是代码块 我是代码块 [&#94;备注]：使用1对```表示行内代码 水平线 使用三个 - 或 * 标记为水平线 待办事项 使用 - [] (未完成) - [x] (已完成) [ ] 未完成待办事项 [x] 已完成待办事项","tags":"Notes","url":"http://127.0.0.1:8000/posts/2017/markdownchang-yong-yu-fa.html"}]}